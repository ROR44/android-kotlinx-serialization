/*
 * Copyright 2017-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

apply plugin: 'java' // Needed for protobuf plugin only
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.protobuf'
apply from: rootProject.file("gradle/targets.gradle")
apply from: rootProject.file("gradle/native_mpp.gradle")

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm') {
            withJava()
            configure([compilations.main, compilations.test]) {
                kotlinOptions {
                    jvmTarget = '1.6'
                }
            }
        }
        fromPreset(presets.js, 'js') {
            nodejs {}
            configure([compilations.main, compilations.test]) {
                kotlinOptions {
                    sourceMap = true
                    moduleKind = "umd"
                    metaInfo = true
                }
            }
        }
    }

    sourceSets.all {
        kotlin.srcDirs = ["$it.name/src"]
        resources.srcDirs = ["$it.name/resources"]
        languageSettings {
            progressiveMode = true
            useExperimentalAnnotation("kotlin.Experimental")
            useExperimentalAnnotation("kotlin.ExperimentalMultiplatform")
            useExperimentalAnnotation("kotlin.ExperimentalStdlibApi")
            useExperimentalAnnotation("kotlinx.serialization.InternalSerializationApi")
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api project(":kotlinx-serialization-runtime")
            }
        }

        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }

        jvmTest {
            kotlin.srcDirs += file("${protobuf.generatedFilesBaseDir}/test/java")
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation 'com.google.protobuf:protobuf-java:3.0.0'
                implementation 'io.kotlintest:kotlintest:2.0.7'
            }
        }

        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }

        jsTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

        nativeMain.dependencies {
        }
    }

    sourceSets.findAll({ it.name.contains("Test") }).forEach { srcSet ->
        srcSet.languageSettings {
            it.useExperimentalAnnotation("kotlinx.serialization.UnstableDefault")
            it.useExperimentalAnnotation("kotlinx.serialization.InternalSerializationApi")

            if (srcSet.name.contains("jvm") || srcSet.name.contains("js")) {
                it.useExperimentalAnnotation("kotlinx.serialization.ImplicitReflectionSerializer")
            }
        }
    }
}

sourceSets.test.proto {
    srcDirs = ['testProto']
}

compileTestKotlinJvm {
    dependsOn 'generateTestProto'
}
